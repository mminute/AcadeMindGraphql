const express = require('express');
const bodyParser = require('body-parser');
const graphqlHttp = require('express-graphql');
const { buildSchema } = require('graphql'); // takes string to build schema object
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const Event = require('./Models/event');
const User = require('./Models/user');

const app = express();

app.use(bodyParser.json());

app.use('/graphql', graphqlHttp({
  schema: buildSchema(`
    type Event {
      _id: ID!
      title: String!
      description: String!
      price: Float!
      date: String!
    }

    type User {
      _id: ID!
      email: String!
      password: String
    }

    input EventInput {
      title: String!
      description: String!
      price: Float!
      date: String!
    }

    input UserInput {
      email: String!
      password: String!
    }

    type RootQuery {
      events: [Event!]!
    }

    type RootMutation {
      createEvent(eventInput: EventInput): Event
      createUser(userInput: UserInput): User
    }

    schema {
      query: RootQuery
      mutation: RootMutation
    }
  `), // valid graphql schema generated by graphql package
  rootValue: {
    // Resolvers
    events: () => {
      return Event.find()
        .then(events => {
          return events.map(evt => ({ ...evt._doc }));
        })
        .catch(err => {
          throw err;
        });
    },
    createEvent: (args) => {
      const { title, description, price, date } = args.eventInput;

      const event = new Event({
        title: title,
        description: description,
        price: +price,
        date: new Date(date),
        creator: '5e12c3fb25196b809c8c320e',
      });

      let createdEvent;
      return event
        .save()
        .then(result => {
          createdEvent = result._doc;
          return User.findById('5e12c3fb25196b809c8c320e');
        })
        .then(user => {
          if (!user) {
            throw new Error('No user found');
          }

          user.createdEvents.push(event);
          return user.save();
        })
        .then(result => {
          return createdEvent;
        })
        .catch(err => {
          console.log(err);
          throw err;
        });
    },
    createUser: args => {
      const { email, password } = args.userInput;

      return User.findOne({ email: email }).then(user => {
        // Will always end up here
        // User === undefined or a user object
        if (user) {
          throw new Error('User already exists');
        }

        return bcrypt
          .hash(password, 12)
          .then(hashedPassword => {
            const user = new User({
              email,
              password: hashedPassword,
            });

            return user.save(); // .save() returns a promise like object
          })
          .then(result => ({ ...result._doc, _id: result.id, password: null }))
          .catch(err => {
            throw err;
          });
      });
    }
  }, // resolver functions match schema endpoints by name
  graphiql: true,
}));

mongoose.connect(
  `mongodb+srv://${process.env.MONGO_USER}:${
    process.env.MONGO_PASSWORD
  }@academindgraphqlapp-zqtqo.mongodb.net/${process.env.MONGO_DB}?retryWrites=true&w=majority&authSource=admin`,
  {
    useNewUrlParser: true,
  },
).then(() => {
  app.listen(3000);
}).catch(err => {
  console.log(err);
})
