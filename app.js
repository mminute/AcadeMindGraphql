const express = require('express');
const bodyParser = require('body-parser');
const graphqlHttp = require('express-graphql');
const { buildSchema } = require('graphql'); // takes string to build schema object
const mongoose = require('mongoose');
const Event = require('./Models/event');

const app = express();

app.use(bodyParser.json());

app.use('/graphql', graphqlHttp({
  schema: buildSchema(`
    type Event {
      _id: ID!
      title: String!
      description: String!
      price: Float!
      date: String!
    }

    input EventInput {
      title: String!
      description: String!
      price: Float!
      date: String!
    }

    type RootQuery {
      events: [Event!]!
    }

    type RootMutation {
      createEvent(eventInput: EventInput): Event
    }

    schema {
      query: RootQuery
      mutation: RootMutation
    }
  `), // valid graphql schema generated by graphql package
  rootValue: {
    events: () => {
      return Event.find()
        .then(events => {
          return events.map(evt => ({ ...evt._doc }));
        })
        .catch(err => {
          throw err;
        });
    },
    createEvent: (args) => {
      const { title, description, price, date } = args.eventInput;

      const event = new Event({
        title: title,
        description: description,
        price: +price,
        date: new Date(date),
      });

      return event
        .save()
        .then(result => {
          console.log(result);
          return { ...result._doc }
        }).catch(err => {
          console.log(err);
          throw err;
        });
    },
  }, // resolver functions match schema endpoints by name
  graphiql: true,
}));

mongoose.connect(
  `mongodb+srv://${process.env.MONGO_USER}:${
    process.env.MONGO_PASSWORD
  }@academindgraphqlapp-zqtqo.mongodb.net/${process.env.MONGO_DB}?retryWrites=true&w=majority`
).then(() => {
  app.listen(3000);
}).catch(err => {
  console.log(err);
})
